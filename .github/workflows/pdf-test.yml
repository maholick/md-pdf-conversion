name: PDF Conversion Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'templates/**'
      - 'pandoc.yaml'
      - 'eisvogel.yaml'
      - 'pandoc/**'
      - 'docker compose.yaml'
      - '.github/workflows/pdf-conversion-test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'templates/**'
      - 'pandoc.yaml'
      - 'eisvogel.yaml'
      - 'pandoc/**'
      - 'docker compose.yaml'
      - '.github/workflows/pdf-conversion-test.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-direct-pandoc:
    name: Test Direct Pandoc Conversion
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull pandoc/extra Docker image
        run: docker pull pandoc/extra:3.1.1.0

      - name: Check markdown files exist
        run: |
          echo "Checking for markdown files in docs directory..."
          ls -la docs/*.md || echo "No markdown files found in docs/"

          if [ ! -f "docs/example.md" ]; then
            echo "Warning: docs/example.md not found"
          fi

      - name: Run pandoc conversion
        run: |
          docker run --rm \
            --platform linux/amd64 \
            --volume "$(pwd):/data" \
            --user $(id -u):$(id -g) \
            pandoc/extra:3.1.1.0 \
            docs/*.md \
            --defaults pandoc.yaml \
            --metadata-file eisvogel.yaml

      - name: Verify PDF output
        run: |
          echo "Checking output directory..."
          ls -la output/

          if [ ! -f "output/example.pdf" ]; then
            echo "Error: PDF file was not generated at output/example.pdf"
            exit 1
          fi

          echo "Success: PDF generated successfully"
          echo "File size: $(du -h output/example.pdf | cut -f1)"

          # Check file size is reasonable (> 10KB)
          size=$(stat -c%s "output/example.pdf" 2>/dev/null || stat -f%z "output/example.pdf" 2>/dev/null)
          if [ "$size" -lt 10240 ]; then
            echo "Warning: PDF file seems too small (${size} bytes)"
            exit 1
          fi

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: generated-pdf-direct
          path: output/example.pdf
          retention-days: 7

  test-docker-compose-conversion:
    name: Test Docker Compose Conversion
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build services
        run: docker compose build

      - name: Start pandoc service
        run: |
          docker compose up -d pandoc
          sleep 5  # Wait for service to be ready

      - name: Run conversion via Docker Compose
        run: |
          docker compose exec -T pandoc \
            pandoc /data/docs/*.md \
            --defaults /data/pandoc.yaml \
            --metadata-file /data/eisvogel.yaml \
            -o /data/output/example-compose.pdf

      - name: Verify PDF output
        run: |
          echo "Checking output directory..."
          ls -la output/

          if [ ! -f "output/example-compose.pdf" ]; then
            echo "Error: PDF file was not generated at output/example-compose.pdf"
            docker compose logs pandoc
            exit 1
          fi

          echo "Success: PDF generated via Docker Compose"
          echo "File size: $(du -h output/example-compose.pdf | cut -f1)"

      - name: Stop services
        if: always()
        run: docker compose down

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: generated-pdf-compose
          path: output/example-compose.pdf
          retention-days: 7

  test-web-ui-conversion:
    name: Test Web UI PDF Conversion
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start all services
        run: |
          docker compose up -d
          echo "Waiting for services to start..."
          sleep 15  # Wait for services to be ready

      - name: Check service health
        run: |
          # Check frontend is responding
          curl -f http://localhost:3000 || (docker compose logs frontend && exit 1)
          echo "Frontend is running"

      - name: Test PDF conversion via API
        run: |
          # Create a test markdown file
          echo "# Test Document" > test.md
          echo "This is a test document for CI." >> test.md

          # Read config files
          pandoc_config=$(cat pandoc.yaml)
          eisvogel_config=$(cat eisvogel.yaml)

          # Send conversion request
          response=$(curl -X POST http://localhost:3000/api/convert-docker \
            -H "Content-Type: application/json" \
            -d "{
              \"files\": [{
                \"name\": \"test.md\",
                \"content\": \"$(cat test.md | sed 's/"/\\"/g' | tr '\n' ' ')\"
              }],
              \"pandocConfig\": \"$(echo "$pandoc_config" | sed 's/"/\\"/g' | tr '\n' ' ')\",
              \"eisvogelConfig\": \"$(echo "$eisvogel_config" | sed 's/"/\\"/g' | tr '\n' ' ')\"
            }" \
            -w "\nHTTP_STATUS:%{http_code}")

          http_status=$(echo "$response" | grep "HTTP_STATUS" | cut -d: -f2)

          if [ "$http_status" != "200" ]; then
            echo "API request failed with status: $http_status"
            echo "Response: $response"
            docker compose logs
            exit 1
          fi

          echo "PDF conversion via Web UI API successful"

      - name: Show service logs on failure
        if: failure()
        run: |
          docker compose logs frontend
          docker compose logs pandoc

      - name: Stop services
        if: always()
        run: docker compose down

  compare-outputs:
    name: Compare PDF Outputs
    needs: [test-direct-pandoc, test-docker compose-conversion]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: generated-pdf-*
          merge-multiple: true

      - name: Check PDF files
        run: |
          echo "Generated PDFs:"
          ls -la *.pdf

          # Check both PDFs exist and have reasonable size
          for pdf in *.pdf; do
            if [ -f "$pdf" ]; then
              size=$(stat -c%s "$pdf" 2>/dev/null || stat -f%z "$pdf" 2>/dev/null)
              echo "$pdf: $(du -h "$pdf" | cut -f1) ($size bytes)"

              if [ "$size" -lt 10240 ]; then
                echo "Error: $pdf is too small"
                exit 1
              fi
            fi
          done

          echo "All PDF conversions completed successfully!"